import { Message } from "whatsapp-web.js";
import { promptTracker } from "../clients/prompt";
import { sydney } from "../clients/sydney";
import { config } from "../config";
import { getAvailableTones, react } from "../utils";

const AVAILABLE_TONES = getAvailableTones();

function truncateWithEllipsis(input: string, maxLength: number): string {
  if (input.length <= maxLength || maxLength < 4) {
    return input;
  }

  const halfLength = Math.floor((maxLength - 3) / 2);
  const start = input.substring(0, halfLength);
  const end = input.substring(input.length - halfLength);
  return `${start} ... ${end}`;
}

export async function handleCommand(
  message: Message,
  command: string,
  args?: string
) {
  const chat = await message.getChat();
  await chat.sendSeen();

  await react(message, "working");
  switch (command.toLowerCase()) {
    case "!ping":
      await message.reply("*pong!*");
      break;
    case "!reset":
      await sydney.conversationsCache.delete(chat.id._serialized);
      await message.reply("Conversation history reset.");
      break;
    case "!pending":
      const pendingPrompts = promptTracker.listPendingPrompts(chat);

      if (pendingPrompts.length === 0) {
        await message.reply("There are no pending prompts.");
        break;
      }

      const pendingTexts = pendingPrompts
        .map(
          ({ data }, number) => `--- Prompt ${number} ---\n${data.text}\n---`
        )
        .join("\n\n");
      const pendingTextsTruncated = truncateWithEllipsis(pendingTexts, 60);

      await message.reply(
        `These are the pending prompts:\n\n${pendingTextsTruncated}`
      );
      break;
    case "!tone":
      if (!args)
        await message.reply(
          `Current tone: *${config.toneStyle}*.\n\n` +
            "To set a different tone, pass it as a parameter to the *!tone* command (eg.: *!tone precise*).\n\n" +
            AVAILABLE_TONES
        );
      else {
        const tone = args.trim().toLowerCase();
        const isValidTone = config.VALID_TONES.includes(
          tone as (typeof config.VALID_TONES)[number]
        );

        if (isValidTone) {
          config.toneStyle = tone as typeof config.toneStyle;
          await message.reply(`Tone set to: *${config.toneStyle}*`);
        } else {
          await message.reply(
            `Tone *${tone}* is invalid.\n\n` + AVAILABLE_TONES
          );
        }
      }
      break;
    case "!help":
      // this help message was generated by Sydney
      await message.reply(
        "These are the available commands:\n\n" +
          "ðŸ‘‰ *!help* shows you this awesome help message.\n" +
          "ðŸ‘‰ *!ping* tells you if I'm still alive with a *pong!*; this should be super fast.\n" +
          "ðŸ‘‰ *!tone _args_?* lets you check or change my tone if you pass *_args_*; if you don't pass *_args_*, i will answer with the current tone and the available options. \n" +
          "ðŸ‘‰ *!pending* gives you a list of the not yet answered prompts you have in this chat.\n" +
          "ðŸ‘‰ *!reset* erases our conversation history."
      );
      break;
    default:
      await message.reply(`Command *${command}* unknown.`);
      break;
  }

  await react(message, "done");
}
