import { Message } from "whatsapp-web.js";
import { serializeError } from "serialize-error";
import { promptTracker } from "../clients/prompt";
import { sydney } from "../clients/sydney";
import { config } from "../config";
import { react } from "../utils";
import type { SourceAttribution, IOptions, SydneyResponse } from "../types";

function appendSources(sources: SourceAttribution[]) {
  let sourcesString = "\n\n";

  sources.forEach((source, index) => {
    sourcesString += `[${index + 1}]: ${source.seeMoreUrl}\n`;
  });

  return sourcesString;
}

async function handleMessageImpl(message: Message) {
  const chat = await message.getChat();
  const pendingPrompts = promptTracker.listPendingPrompts(chat);

  if (pendingPrompts.length >= 1) {
    const lastPrompt = pendingPrompts.pop();

    lastPrompt?.prompt.then(async () => {
      await handleMessage(message);
    });

    await react(message, "queued");
    return;
  }

  await chat.sendSeen();
  await react(message, "working");

  const prompt = message.body;

  try {
    const { response, details } = await promptTracker.track(
      prompt,
      chat,
      askSydney(prompt, chat.id._serialized)
    );
    const hasSources = details.sourceAttributions.length >= 1;
    const sources = hasSources ? appendSources(details.sourceAttributions) : "";

    await react(message, "done");
    await message.reply(response + sources);
  } catch (e) {
    await react(message, "error");
    const error = serializeError(e);
    const errorMessage = error.message?.split("\n")[0];

    console.log({ error });
    await message.reply(`Error:\n\n${errorMessage}`);
  }

  chat.clearState();
}

async function askSydney(prompt: string, chatId: string) {
  let options: IOptions = {
    toneStyle: config.toneStyle,
    jailbreakConversationId: chatId,
    onProgress: (token: string) => {
      process.stdout.write(token);
    }
  };

  const onGoingConversation = await sydney.conversationsCache.get(chatId);

  if (onGoingConversation) {
    const [{ parentMessageId }] = onGoingConversation.messages.slice(-1);
    options.parentMessageId = parentMessageId;
  }

  const response: SydneyResponse = await sydney.sendMessage(prompt, options);
  //console.dir(response, { depth: null });
  return response;
}

// generated by GPT-4, this ensures the typing indicator will last more than 25s
function typingIndicatorWrapper(fn: (message: Message) => Promise<void>) {
  return async (message: Message) => {
    const chat = await message.getChat();
    let interval: NodeJS.Timeout = setTimeout(() => {}, 0);

    const typingIndicator = () => {
      chat.sendStateTyping();
      interval = setTimeout(typingIndicator, 25000);
    };

    typingIndicator();

    try {
      const result = await fn(message);
      clearTimeout(interval);
      return result;
    } catch (error) {
      clearTimeout(interval);
      throw error;
    }
  };
}

export const handleMessage = typingIndicatorWrapper(handleMessageImpl);
